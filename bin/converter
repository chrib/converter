#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'converter'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/converter` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/converter now"
  exit 64
end

include GLI::App

program_desc 'A simple command line program to convert between different measurements'

version Converter::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Convert the given temperature to Celsius'
arg_name 'degree in Fahrenheit'
command :celsius do |c|
  c.action do |global_options,options,args|

    if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
    Temperature.celsius(args[0].to_i)
  end
end

desc 'Convert the given temperature to Fahrenheit'
arg_name 'degree in Celsius'
command :fahrenheit do |c|
  c.action do |global_options,options,args|

    if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Temperature.fahrenheit(args[0].to_i)
  end
end

desc 'Convert the given distance to meter'
arg_name 'distance in foot'
command :meter do |c|
  c.action do |global_options,options,args|
    if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Distance.meter(args[0].to_i)
  end
end

desc 'Convert the given distance to foot'
arg_name 'distance in meter'
command :foot do |c|
  c.action do |global_options,options,args|
     if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Distance.foot(args[0].to_i)
  end
end

desc 'Convert the given distance to miles'
arg_name 'distance in km'
command :miles do |c|
  c.action do |global_options,options,args|
      if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Distance.miles(args[0].to_i)
  end
end

desc 'Convert the given distance to km'
arg_name 'distance in miles'
command :km do |c|
  c.action do |global_options,options,args|
       if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Distance.km(args[0].to_i)
  end
end

desc 'Convert the given height to cm'
arg_name 'height in inches'
command :cm do |c|
  c.action do |global_options,options,args|
    if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Height.cm(args[0].to_i)
  end
end

desc 'Convert the given height to inches'
arg_name 'height in cm'
command :inches do |c|
  c.action do |global_options,options,args|
     if args.length > 1
      raise "Only one argument can be converted"
      exit 1
    end
    Height.inches(args[0].to_i)
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
